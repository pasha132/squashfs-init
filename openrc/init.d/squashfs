#!/sbin/openrc-run
# Copyright (c) 2014 Pavel Andreev <pasha132@gmail.com>
# Released under the 2-clause BSD license.

description="Configure squashfs mounts."

# Handy var so we don't have to embed new lines everywhere for array splitting
__IFS="
"
depend()
{
	use modules overlay squashfs
	need localmount zram-init
}

# Support bash arrays - sigh
_array_helper()
{
	local _a=

	eval _a=\$$1
	_a=$(echo "${_a}" | sed -e 's:^[[:space:]]*::' -e 's:[[:space:]]*$::' -e '/^$/d' -e 's:[[:space:]]\{1,\}: :g')

	[ -n "${_a}" ] && printf "%s\n" "${_a}"
}

_get_array()
{
	local _a=
	if [ -n "${BASH}" ]; then
		case "$(declare -p "$1" 2>/dev/null)" in
			"declare -a "*)
				ewarn "You are using a bash array for $1."
				ewarn "This feature will be removed in the future."
				ewarn "Please see net.example for the correct format for $1."
				eval "set -- \"\${$1[@]}\""
				for _a; do
					printf "%s\n" "${_a}"
				done
				return 0
				;;
		esac
	fi

	_array_helper $1
}

_load_config()
{
	local config="$(_get_array "config_${SQFSVAR}")"
	local fallback="$(_get_array fallback_${SQFSVAR})"

	config_index=0
	local IFS="$__IFS"
	set -- ${config}

	# We should support a space separated array for cidr configs
	# But only as long as they do not contain other parameters for the address
	if [ $# = 1 ]; then
		unset IFS
		set -- ${config}
		# Of course, we may have a single address added old style.
		# If the NEXT argument is a v4 or v6 address, it's the next config.
		# Otherwise, it's arguments to the first config...
		if [ "${2#*.*}" = "${2}" -a "${2#*:*}" = "${2}" ]; then
			# Not an IPv4/IPv6
			local IFS="$__IFS"
			set -- ${config}
		fi
	fi

	# We store our config in an array like vars
	# so modules can influence it
	for cmd; do
		eval config_${config_index}="'${cmd}'"
		: $(( config_index += 1 ))
	done
	# Terminate the list
	eval config_${config_index}=

	config_index=0
	for cmd in ${fallback}; do
		eval fallback_${config_index}="'${cmd}'"
		: $(( config_index += 1 ))
	done
	# Terminate the list
	eval fallback_${config_index}=

	# Don't set to zero, so any net modules don't have to do anything extra
	config_index=-1
}

setup_config()
{
	_load_config

	local SNAME=${RC_SVCNAME#*.}
	local SQFSVAR=$(shell_var "${SNAME}")

	eval OUR_SRC=\$src_${SQFSVAR}
	if [ -n "${OUR_SRC}" ]; then
		SRC=${OUR_SRC}
	fi
	SRC=${SRC:-${src}}

	eval OUR_SQFS=\$sqfs_${SQFSVAR}
	if [ -n "${OUR_SQFS}" ]; then
		SQFS=${OUR_SQFS}
	fi
	SQFS=${SQFS:-${sqfs}}

	eval OUR_SQFS_ROOT=\$root_${SQFSVAR}
	if [ -n "${OUR_SQFS_ROOT}" ]; then
		SQFS_ROOT=${OUR_SQFS_ROOT}
	fi
	SQFS_ROOT=${SQFS_ROOT:-${root}}
	SQFS_RW="${SQFS_ROOT}/.${SQFSVAR}-rw"
	SQFS_WORK="${SQFS_ROOT}/.${SQFSVAR}-work"

	eval OUR_CHMOD=\$chmod_${SQFSVAR}
	if [ -n "${OUR_CHMOD}" ]; then
		CHMOD=${OUR_CHMOD}
	fi
	CHMOD=${CHMOD:-${chmod}}

	eval OUR_CHOWN=\$chown_${SQFSVAR}
	if [ -n "${OUR_CHOWN}" ]; then
		CHOWN=${OUR_CHOWN}
	fi
	CHOWN=${CHOWN:-${chown}}

	eval OUR_OPTS=\$mkopts_${SQFSVAR}
	if [ -n "${OUR_OPTS}" ]; then
		SQFS_OPTS=${OUR_OPTS}
	fi
	SQFS_OPTS="${SQFS_OPTS}${SQFS_OPTS:+ }${mkopts}"
}

start()
{
	local SNAME=${RC_SVCNAME#*.}
	local SQFSVAR=$(shell_var "${SNAME}")
	local SRC SQFS SQFS_ROOT SQFS_RW SQFS_WORK SQFS_WORK CHMOD CHOWN SQFS_OPTS SQFS_DELTA
	setup_config

	ebegin "mounting read-only ${SNAME} squashfs image"
	if [ ! -f "${SQFS}/${SQFSVAR}-current.sqfs" ]; then
		ewarn "no squashfs image ${SQFSVAR}.sqfs in ${SQFS}."
		einfo "please use 'mksquashfs ${SRC} ${SQFS}/${SQFSVAR}.sqfs ${SQFS_OPTS} && ln -s ${SQFSVAR}.sqfs ${SQFS}/${SQFSVAR}-current.sqfs' for it"
		return 1
	fi
	
	mount -rt squashfs -o loop,nodev "${SQFS}/${SQFSVAR}-current.sqfs" "${SRC}"
	retval=$?
	eend $retval
	[ $retval -ne 0 ] && return $retval

	ebegin "mounting read-write ${SNAME} image with overlayfs"

	eindent
		einfo "in ${SQFS_ROOT}"
	eoutdent

	[ -d ${SQFS_WORK} ] || mkdir -p ${SQFS_WORK}
	[ -d ${SQFS_RW} ] || mkdir -p ${SQFS_RW}

	chmod ${CHMOD} "${SQFS_RW}" "${SQFS_WORK}"
	chown ${CHOWN} "${SQFS_RW}" "${SQFS_WORK}"
	mount -t overlay overlay -olowerdir=${SRC},upperdir=${SQFS_RW},workdir=${SQFS_WORK} ${SRC}
	eend $?
}

stop()
{
	local SNAME=${RC_SVCNAME#*.}
	local SQFSVAR=$(shell_var "${SNAME}")
	local SRC SQFS SQFS_ROOT SQFS_RW SQFS_WORK CHMOD CHOWN SQFS_OPTS SQFS_DELTA sqfs_tmp=
	setup_config

	retval=0

	if [ ! -z `ls -A ${SQFS_RW} | head -n1` ]; then
		ebegin "updating ${SNAME} squashfs image"
		sqfs_tmp=$(mktemp)
		if [ -n ${sqfs_tmp} ]; then
			sync && \
			mksquashfs "${SRC}" "${sqfs_tmp}" ${SQFS_OPTS} > /dev/null
		fi && \
		mv -f "${SQFS}/${SQFSVAR}.sqfs" "${SQFS}/${SQFSVAR}-old.sqfs" && \
		mv -f "${sqfs_tmp}" "${SQFS}/${SQFSVAR}.sqfs" || return $?
		retval=$?
		eend $retval
	fi

	retval=$?

	if [ $retval -ne 0 ]; then
		eend 1 "updating failed"
	fi

	. "$RC_LIBEXECDIR"/sh/rc-mount.sh

	eindent
	ebegin "unmounting ${SQFSVAR} squashfs image"
	do_unmount umount --fstype-regex "squashfs|overlay" "${SRC}"
	eoutdent
	retval=$?
	if [ $retval -ne 0 ]; then
		eend 1 "unmounting failed"
	fi

	ln -sf "${SQFSVAR}.sqfs" "${SQFS}/${SQFSVAR}-current.sqfs"

	rm -rf -- "${SQFS_RW}" "${SQFS_WORK}"
 
	eend 0
}
